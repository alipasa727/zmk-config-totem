#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 100   // 10

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    quick-tap-ms = <200>;
    flavor = "tap-preferred";
    tapping-term-ms = <225>;
    require-prior-idle-ms = <150>;
};

&lt {
    tapping-term-ms = <175>;
    quick-tap-ms = <200>;
    require-prior-idle-ms = <(-1)>;
    flavor = "hold-preferred";
};

/ {
    combos {
        compatible = "zmk,combos";

        kana {
            bindings = <&kp RA(GRAVE)>;
            key-positions = <26 28>;
        };

        cp {
            bindings = <&kp LC(C)>;
            key-positions = <22 23>;
        };

        opst {
            bindings = <&kp LS(LC(V))>;
            key-positions = <24 25>;
        };
    };

    behaviors {
        bs_dl: bs_dl {
            compatible = "zmk,behavior-mod-morph";
            label = "BS_DL";
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        app_layer_del: app_layer_del {
            compatible = "zmk,behavior-tap-dance";
            label = "APP_LAYER_DEL";
            #binding-cells = <0>;
            bindings = <&lt 4 K_APPLICATION>, <&kp DEL>;
        };

        min_plu: min_plu {
            compatible = "zmk,behavior-tap-dance";
            label = "MIN_PLU";
            #binding-cells = <0>;
            bindings = <&kp MINUS>, <&kp EQUAL>;
        };

        slash: slash {
            compatible = "zmk,behavior-tap-dance";
            label = "SLASH";
            #binding-cells = <0>;
            bindings = <&kp SLASH>, <&kp BACKSLASH>;
        };

        left_kakko: left_kakko {
            compatible = "zmk,behavior-tap-dance";
            label = "LEFT_KAKKO";
            #binding-cells = <0>;
            bindings = <&kp LEFT_PARENTHESIS>, <&kp LEFT_BRACKET>;
        };

        right_kakko: right_kakko {
            compatible = "zmk,behavior-tap-dance";
            label = "RIGHT_KAKKO";
            #binding-cells = <0>;
            bindings = <&kp RIGHT_PARENTHESIS>, <&kp RIGHT_BRACKET>;
        };

        com_col: com_col {
            compatible = "zmk,behavior-tap-dance";
            label = "COM_COL";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMICOLON>;
        };

        per_apo: per_apo {
            compatible = "zmk,behavior-tap-dance";
            label = "PER_APO";
            #binding-cells = <0>;
            bindings = <&kp PERIOD>, <&kp APOS>;
        };

        q_at: q_at {
            compatible = "zmk,behavior-tap-dance";
            label = "Q_AT";
            #binding-cells = <0>;
            bindings = <&kp Q>, <&kp AT_SIGN>;
        };
    };

    macros {
        right_arrow: right_arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GT>;
            label = "RIGHT_ARROW";
        };

        letf_arrow: letf_arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LT &kp MINUS>;
            label = "LETF_ARROW";
        };

        double_pare: double_pare {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LPAR &kp RPAR &kp LEFT>;
            label = "DOUBLE_PARE";
        };

        double_bra: double_bra {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LBKT &kp RBKT &kp LEFT>;
            label = "DOUBLE_BRA";
        };

        double_quo: double_quo {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SQT &kp SQT &kp LEFT>;
            label = "DOUBLE_QUO";
        };

        double_double_quo: double_double_quo {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DQT &kp DQT &kp LEFT>;
            label = "DOUBLE_DOUBLE_QUO";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "qlu";
            bindings = <
             &q_at       &kp L       &kp U         &com_col     &per_apo     &kp F        &kp W        &kp R           &kp Y       &kp P
             &mt LGUI E  &mt LALT I  &mt LCTRL A   &mt LSHFT O  &min_plu     &kp K        &mt RSHFT T  &mt RCTRL N     &mt RALT S  &mt RGUI H
&left_kakko  &kp Z       &kp X       &kp C         &kp V        &slash       &kp G        &kp D        &kp M           &kp J       &kp B       &right_kakko
                                     &lt 3 ESCAPE  &bs_dl       &lt 1 TAB    &lt 2 SPACE  &kp ENTER    &app_layer_del
            >;
        };

        left {
            label = "left";
            bindings = <
        &kp HASH              &kp DOLLAR     &kp UP_ARROW          &kp ASTERISK     &kp PERCENT    &bs_dl    &kp N7              &kp N8        &kp N9             &slash
        &mt LGUI EXCLAMATION  &mt LALT LEFT  &mt LCTRL DOWN_ARROW  &mt LSHFT RIGHT  &kp CARET      &com_col  &mt RSHFT NUMBER_4  &mt RCTRL N5  &mt RALT NUMBER_6  &mt RIGHT_GUI N0
&trans  &trans                &letf_arrow    &double_pare          &right_arrow     &kp AMPS       &per_apo  &kp N1              &kp N2        &kp N3             &min_plu          &trans
                                             &trans                &trans           &trans         &trans    &trans              &trans
            >;
        };

        right {
            label = "right";
            bindings = <
        &kp F11      &kp F5        &kp F4        &kp F12       &kp F9      &double_quo         &kp PAGE_UP      &kp UP_ARROW    &kp PAGE_DOWN   &double_bra
        &mt LGUI F1  &mt LALT F10  &mt LCTRL F6  &mt LSHFT F2  &kp F3      &double_double_quo  &mt RSHFT LEFT   &mt RCTRL DOWN  &mt RALT RIGHT  &kp RIGHT_GUI
&trans  &trans       &trans        &kp F8        &kp F7        &kp CAPS    &kp GRAVE           &kp RS(RC(TAB))  &kp RC(TAB)     &kp HOME        &kp END        &trans
                                   &trans        &trans        &trans      &trans              &trans           &trans
            >;
        };

        ms {
            bindings = <
       &none     &none         &kp PRINTSCREEN   &none           &none    &none     &none           &mmv MOVE_UP    &none            &none
       &mkp MB1  &kp LEFT_ALT  &kp LEFT_CONTROL  &kp LEFT_SHIFT  &none    &none     &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &none
&none  &mkp MB2  &none         &none             &none           &none    &none     &none           &none           &none            &none  &none
                               &none             &none           &none    &mkp MB1  &mkp MB2        &mkp MB3
            >;
        };

        conf {
            bindings = <
              &bt BT_SEL 0   &bt BT_SEL 1    &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4     &none  &none       &none              &none            &none
              &bt BT_DISC 0  &bt BT_DISC 1   &bt BT_DISC 2  &bt BT_DISC 3  &bt BT_DISC 4    &none  &kp C_MUTE  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &none
&out OUT_BLE  &bt BT_CLR     &bt BT_CLR_ALL  &none          &none          &none            &none  &none       &none              &none            &none  &out OUT_USB
                                             &none          &none          &none            &none  &none       &none
            >;
        };
    };
};
